{"version":3,"sources":["components/CommentInput/CommentInput.tsx","components/Button/ButtonThemes.ts","components/Button/Button.tsx","api/api.js","components/FilesList/FilesList.tsx","components/AttachFileButton/AttachFileButton.tsx","components/ProgressBar/ProgressBar.tsx","App.tsx","serviceWorker.ts","index.tsx","components/AttachFileButton/AttachFileButton.module.scss","components/ProgressBar/ProgressBar.module.scss","components/FilesList/FilesList.module.scss","components/CommentInput/CommentInput.module.scss","App.module.scss","components/Button/Button.module.scss"],"names":["CommentInput","onChange","value","props","target","className","classNames","styles","input","Theme","this","ButtonThemes","success","primary","secondary","Button","theme","as","As","button","defaultProps","urlWithoutPort","socketUrl","serverUrl","getFilesUrl","uploadFileUrl","downloadFileUrl","FilesList","useState","uploadingFile","setUploadingFile","onDownloadFile","file","a","axios","post","filename","responseType","response","blob","data","link","document","createElement","download","reader","FileReader","readAsDataURL","onload","href","result","click","container","sort","file1","file2","timestamp","map","index","item","key","row","name","size","loading","color","toFixed","time","Date","toLocaleString","expand","error","comment","onClick","downloadButton","AttachFileButton","label","children","type","inputFile","event","onLoadFiles","files","ProgressBar","progress","style","width","now","socket","openSocket","tokenId","on","newTokenId","App","isFileUploading","setIsFileUploading","isFileListUploading","setIsFileListUploading","setComment","attachedFile","setAttachedFile","listOfFiles","setListOfFiles","setProgress","onSend","formData","FormData","append","off","headers","newFiles","push","downloadFilesNames","get","useEffect","title","attachedFileName","placeholder","commentInput","actions","disabled","Boolean","sendButton","loader","progressBar","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"mRAkCeA,MAhBf,YAA+D,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAUC,EAAmB,oCAM1D,OACI,2CACQA,EADR,CAEIF,SAPc,SAAC,GAA6C,IAA5CG,EAA2C,EAA3CA,OACpBH,EAASG,EAAOF,QAOZA,MAAOA,EACPG,UAAWC,IAAWC,IAAOC,MAAOL,EAAME,e,wBCvBhDI,EAGF,WAAYJ,GAAmB,yBAF/BA,UAAY,GAGRK,KAAKL,UAAYA,GAUVM,EANM,CACjBC,QAAS,IAAIH,EAAMF,IAAOK,SAC1BC,QAAS,IAAIJ,EAAMF,IAAOM,SAC1BC,UAAW,IAAIL,EAAMF,IAAOO,YCJ1BC,EAA6B,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAuC,IAAhCC,GAAGC,OAA6B,MAAxB,SAAwB,EAAXf,EAAW,8BACxE,OACI,kBAACe,EAAD,iBACQf,EADR,CAEIE,UAAWC,IAAWH,EAAME,UAAWE,IAAOY,OAAzB,OAAiCH,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAOX,eAKzEU,EAAOK,aAAe,CAClBJ,MAAOL,EAAaE,SAGTE,Q,yCClBTM,EAAc,UAFL,WAEK,OAR+B,iBAQ/B,KAEPC,EAAYD,EARN,KAUbE,EAAYF,EARC,KAUNG,EAAcD,EAAY,aAE1BE,EAAgBF,EAAY,UAE5BG,EAAkBH,EAAY,iBCQrCI,EAA6B,SAACxB,GAAW,IAAD,EAEAyB,mBAAuB,MAFvB,mBAEnCC,EAFmC,KAEpBC,EAFoB,KAIpCC,EAAc,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACnBH,EAAiBE,GADE,SAEIE,IAAMC,KAAKT,EAAiB,CAACU,SAAUJ,EAAKI,UAAW,CAACC,aAAc,SAF1E,OAEbC,EAFa,OAGnBR,EAAiB,MACXS,EAAOD,EAASE,MAElBC,EAAOC,SAASC,cAAc,MAC7BC,SAAWZ,EAAKI,UAEjBS,EAAS,IAAIC,YACVC,cAAcR,GAErBM,EAAOG,OAAS,WACZP,EAAKQ,KAAOJ,EAAOK,OACnBT,EAAKU,SAdU,4CAAH,sDAkBpB,OACI,yBACI9C,UAAWE,IAAO6C,WAEjBjD,EAAMqC,KACFa,MAAK,SAACC,EAAOC,GACV,OAAGD,EAAME,UAAYD,EAAMC,UAChB,EAEHF,EAAME,UAAYD,EAAMC,WACpB,EAEL,KAEVC,KAAI,SAACzB,EAAM0B,GAAP,OACL,yBAAKrD,UAAWE,IAAOoD,KAAMC,IAAKF,GAC9B,yBAAKrD,UAAWE,IAAOsD,KACnB,0BAAMxD,UAAWE,IAAOuD,MAAO9B,EAAKI,UACpC,kBAAC,aAAD,CAAY2B,KAAM,GAAIC,QAAShC,IAASH,EAAeoC,MAAO,YAC9D,0BAAM5D,UAAWE,IAAOwD,OAAQ/B,EAAK+B,KAAO,MAAMG,QAAQ,GAA1D,iBACA,0BAAM7D,UAAWE,IAAO4D,MAAO,IAAIC,KAAKpC,EAAKwB,WAAWa,mBAE5D,yBAAKhE,UAAWE,IAAO+D,QAClBtC,EAAKuC,OAAU,0BAAMlE,UAAWE,IAAOgE,OAAQvC,EAAKuC,OACpDvC,EAAKwC,SAAY,0BAAMnE,UAAWE,IAAOiE,SAAxB,SAAwCxC,EAAKwC,SAC/D,kBAAC,EAAD,CACIxD,MAAOL,EAAaG,UACpB2D,QAAS,kBAAM1C,EAAeC,IAC9B3B,UAAWE,IAAOmE,gBAHtB,mBAcxB/C,EAAUP,aAAe,CACrBoB,KAAM,IAGKb,Q,iBC5DAgD,EArB2B,SAAAxE,GAOtC,OACI,2BAAOE,UAAWE,IAAOqE,OACrB,kBAAC,EAAD,CAAQ3D,GAAI,MAAOD,MAAOL,EAAaE,SAClCV,EAAM0E,UAEX,2BACIC,KAAM,OACNzE,UAAWE,IAAOwE,UAClB9E,SAbU,SAAC+E,GACnB7E,EAAM8E,aAAe9E,EAAM8E,YAAYD,EAAM5E,OAAO8E,OACpDF,EAAM5E,OAAOF,MAAQ,Q,kCCQdiF,EAdsB,SAAAhF,GAEjC,OACI,yBAAKE,UAAWE,IAAO6C,WACnB,yBACI/C,UAAWE,IAAO6E,SAClBC,MAAO,CACHC,MAAOnF,EAAMoF,IAAM,SCAjCC,EAASC,IAAWnE,GAEtBoE,EAAwB,KAE5BF,EAAOG,GAAG,WAAW,SAACC,GAClBF,EAAUE,KAoICC,MAjIf,WAAgB,IAAD,EAEmCjE,oBAAS,GAF5C,mBAEJkE,EAFI,KAEaC,EAFb,OAI2CnE,oBAAS,GAJpD,mBAIJoE,EAJI,KAIiBC,EAJjB,OAMmBrE,mBAAS,IAN5B,mBAMJ4C,EANI,KAMK0B,EANL,OAQ6BtE,mBAAsB,MARnD,mBAQJuE,EARI,KAQUC,EARV,OAU2BxE,mBAAuB,IAVlD,mBAUJyE,EAVI,KAUSC,EAVT,OAYqB1E,mBAAwB,MAZ7C,mBAYJwD,EAZI,KAYMmB,EAZN,KAsBLC,EAAM,uCAAG,kCAAAvE,EAAA,6DACPwE,EAAW,IAAIC,UAEVC,OAAO,UAAWjB,GAC3Be,EAASE,OAAO,UAAWnC,GAC3BiC,EAASE,OAAO,OAAQR,GACxBJ,GAAmB,GACnBP,EAAOG,GAAG,YAAY,SAACnD,GACF,aAAdA,EAAKsC,MACJyB,EAAY/D,EAAK4C,UAEJ,QAAd5C,EAAKsC,OACJU,EAAOoB,IAAI,YACXL,EAAY,MACZH,EAAgB,MAChBF,EAAW,IACXH,GAAmB,OAhBhB,kBAoBgB7D,IAAMC,KAAKV,EAAegF,EAAU,CACvDI,QAAS,CACL,eAAgB,yBAtBjB,OAoBDvE,EApBC,OAyBD4C,EAAQ5C,EAASE,KAEvB8D,EAAepB,GA3BR,mDA6BD4B,EA7BC,YA6BcT,IACZU,KAAK,CACV3E,SAAQ,OAAE+D,QAAF,IAAEA,OAAF,EAAEA,EAAcrC,KACxBC,KAAI,OAAEoC,QAAF,IAAEA,OAAF,EAAEA,EAAcpC,KACpBP,UAAWY,KAAKmB,MAChBf,UACAD,MAAO,4OAEXiB,EAAOoB,IAAI,YACXL,EAAY,MACZH,EAAgB,MAChBF,EAAW,IACXH,GAAmB,GACnBO,EAAeQ,GA1CR,0DAAH,qDA8CNE,EAAkB,uCAAG,8BAAA/E,EAAA,6DACvBgE,GAAuB,GADA,SAEA/D,IAAM+E,IAAIzF,GAFV,OAEjBc,EAFiB,OAGvB2D,GAAuB,GACjBf,EAAQ5C,EAASE,KAEvB8D,EAAepB,GANQ,2CAAH,qDAaxB,OAJAgC,qBAAU,WACNF,MACD,IAGC,yBAAK3G,UAAWE,IAAO6C,WACnB,wBAAI/C,UAAWE,IAAO4G,OAAtB,gBAIIhB,GACA,0BAAM9F,UAAWE,IAAO6G,kBAAxB,SACWjB,EAAarC,MAG5B,kBAAC,EAAD,CACI7D,SA/EK,SAACC,GACdgG,EAAWhG,IA+EHA,MAAOsE,EACP6C,YAAa,qEACbhH,UAAWE,IAAO+G,eAEtB,yBAAKjH,UAAWE,IAAOgH,SACnB,kBAAC,EAAD,CAAkBtC,YAjFV,SAACC,GACjBkB,EAAgBlB,EAAM,MAgFd,yFAGA,kBAAC,EAAD,CACIlE,MAAOL,EAAaC,QACpB4G,UAAWC,QAAQtB,IAAiBL,EACpCrB,QAAS+B,EACTnG,UAAWE,IAAOmH,YAJtB,yDAOI,0BAAMrH,UAAWE,IAAOoH,QACpB,kBAAC,aAAD,CACI5D,KAAM,GACNC,QAAS8B,EACT7B,MAAO,cAIlBmB,GACG,yBAAK/E,UAAWE,IAAOqH,aACnB,kBAAC,EAAD,CAAarC,IAAKH,MAK7BY,EAAsB,kBAAC,aAAD,CAAY/B,MAAO,UAAWD,QAASgC,EAAqBjC,KAAM,KAAS,kBAAC,EAAD,CAAWvB,KAAM6D,MCvI3GoB,QACW,cAA7BI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzF,SAAS0F,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApE,GACLqE,QAAQrE,MAAMA,EAAMsE,a,mBEhJ5BC,EAAOC,QAAU,CAAC,UAAY,sC,mBCA9BD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,SAAW,gC,kBCAxED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,wBAAwB,IAAM,uBAAuB,KAAO,wBAAwB,KAAO,wBAAwB,KAAO,wBAAwB,MAAQ,yBAAyB,OAAS,0BAA0B,eAAiB,kCAAkC,QAAU,6B,mBCArVD,EAAOC,QAAU,CAAC,MAAQ,8B,kBCA1BD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,aAAe,0BAA0B,QAAU,qBAAqB,iBAAmB,8BAA8B,WAAa,wBAAwB,OAAS,oBAAoB,YAAc,2B,uDCAzRD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,QAAU,wBAAwB,UAAY,6B","file":"static/js/main.9342adc5.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\r\n\r\nimport classNames from \"classnames\";\r\nimport SimpleSpread from \"../../types/SimpleSpread\";\r\n\r\nimport styles from './CommentInput.module.scss';\r\n\r\n\r\ninterface Props {\r\n    onChange(value: string): void,\r\n\r\n    value: string,\r\n    className?: string\r\n}\r\n\r\ninterface PropTypes extends SimpleSpread<React.HTMLAttributes<HTMLInputElement>, Props> {\r\n}\r\n\r\nfunction CommentInput({onChange, value, ...props}: PropTypes) {\r\n\r\n    const onChangeInput = ({target}: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(target.value);\r\n    };\r\n\r\n    return (\r\n        <input\r\n            {...props}\r\n            onChange={onChangeInput}\r\n            value={value}\r\n            className={classNames(styles.input, props.className)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default CommentInput;\r\n","import styles from './Button.module.scss';\r\n\r\nexport interface ITheme {\r\n    className: string\r\n}\r\n\r\nclass Theme implements ITheme {\r\n    className = \"\";\r\n\r\n    constructor(className:string) {\r\n        this.className = className;\r\n    }\r\n}\r\n\r\nconst ButtonThemes = {\r\n    success: new Theme(styles.success),\r\n    primary: new Theme(styles.primary),\r\n    secondary: new Theme(styles.secondary)\r\n};\r\n\r\nexport default ButtonThemes;\r\n","import React from 'react';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport ButtonThemes, {ITheme} from \"./ButtonThemes\";\r\n\r\nimport styles from './Button.module.scss';\r\n\r\ninterface PropTypes extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    theme?: ITheme,\r\n    as?: React.ComponentType<any> | React.ElementType\r\n}\r\n\r\nconst Button:React.FC<PropTypes> = ({theme, as:As = \"button\", ...props}) => {\r\n    return (\r\n        <As\r\n            {...props}\r\n            className={classNames(props.className, styles.button, theme?.className)}\r\n        />\r\n    );\r\n};\r\n\r\nButton.defaultProps = {\r\n    theme: ButtonThemes.primary\r\n};\r\n\r\nexport default Button;\r\n","const IP = process.env.NODE_ENV === \"production\" ? \"46.101.182.162\" : \"localhost\";\r\n\r\nconst socketPort = 8080;\r\n\r\nconst serverPort = 1080;\r\n\r\nconst prefix = \"http://\";\r\n\r\nconst urlWithoutPort = `${prefix}${IP}:`;\r\n\r\nexport const socketUrl = urlWithoutPort + socketPort;\r\n\r\nconst serverUrl = urlWithoutPort + serverPort;\r\n\r\nexport const getFilesUrl = serverUrl + \"/get-files\";\r\n\r\nexport const uploadFileUrl = serverUrl + \"/upload\";\r\n\r\nexport const downloadFileUrl = serverUrl + \"/download-file\";\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport styles from './FilesList.module.scss';\r\nimport {ClipLoader} from \"react-spinners\";\r\nimport Button from \"../Button/Button\";\r\nimport ButtonThemes from \"../Button/ButtonThemes\";\r\nimport {downloadFileUrl} from \"../../api/api\";\r\n\r\nexport interface IFile {\r\n    size: number,\r\n    timestamp: number,\r\n    filename: string,\r\n    comment: string,\r\n    error?: string\r\n}\r\n\r\ninterface IExpand {\r\n    isExpanded: boolean\r\n}\r\n\r\ninterface Props {\r\n    data: Array<IFile>\r\n}\r\n\r\nconst FilesList: React.FC<Props> = (props) => {\r\n\r\n    const [uploadingFile, setUploadingFile] = useState<null | IFile>(null);\r\n\r\n    const onDownloadFile = async (file: IFile):Promise<any> => {\r\n        setUploadingFile(file);\r\n        const response = await axios.post(downloadFileUrl, {filename: file.filename}, {responseType: \"blob\"});\r\n        setUploadingFile(null);\r\n        const blob = response.data;\r\n\r\n        let link = document.createElement('a');\r\n        link.download = file.filename;\r\n\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(blob);\r\n\r\n        reader.onload = function() {\r\n            link.href = reader.result as string;\r\n            link.click();\r\n        };\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={styles.container}\r\n        >\r\n            {props.data\r\n                .sort((file1, file2) => {\r\n                    if(file1.timestamp < file2.timestamp) {\r\n                        return 1;\r\n                    }\r\n                    else if(file1.timestamp > file2.timestamp) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                })\r\n                .map((file, index) => (\r\n                <div className={styles.item} key={index}>\r\n                    <div className={styles.row}>\r\n                        <span className={styles.name}>{file.filename}</span>\r\n                        <ClipLoader size={12} loading={file === uploadingFile} color={\"#2EBF2E\"} />\r\n                        <span className={styles.size}>{(file.size / 1024).toFixed(0)} Кб</span>\r\n                        <span className={styles.time}>{new Date(file.timestamp).toLocaleString()}</span>\r\n                    </div>\r\n                    <div className={styles.expand}>\r\n                        {file.error && (<span className={styles.error}>{file.error}</span>)}\r\n                        {file.comment && (<span className={styles.comment}>Note: {file.comment}</span>)}\r\n                        <Button\r\n                            theme={ButtonThemes.secondary}\r\n                            onClick={() => onDownloadFile(file)}\r\n                            className={styles.downloadButton}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nFilesList.defaultProps = {\r\n    data: []\r\n} as Props;\r\n\r\nexport default FilesList;\r\n","import React from 'react';\r\n\r\nimport styles from './AttachFileButton.module.scss';\r\nimport Button from \"../Button/Button\";\r\nimport ButtonThemes from \"../Button/ButtonThemes\";\r\n\r\ninterface Props {\r\n    onLoadFiles?(files:FileList | null):void\r\n}\r\n\r\nconst AttachFileButton: React.FC<Props> = props => {\r\n\r\n    const onChangeInput = (event:React.ChangeEvent<HTMLInputElement>) => {\r\n        props.onLoadFiles && props.onLoadFiles(event.target.files);\r\n        event.target.value = \"\";\r\n    };\r\n\r\n    return (\r\n        <label className={styles.label}>\r\n            <Button as={\"div\"} theme={ButtonThemes.primary}>\r\n                {props.children}\r\n            </Button>\r\n            <input\r\n                type={\"file\"}\r\n                className={styles.inputFile}\r\n                onChange={onChangeInput}\r\n            />\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default AttachFileButton;\r\n","import React from 'react';\r\n\r\nimport styles from './ProgressBar.module.scss';\r\n\r\ninterface Props {\r\n    now: number\r\n}\r\n\r\nconst ProgressBar: React.FC<Props> = props => {\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div\r\n                className={styles.progress}\r\n                style={{\r\n                    width: props.now + \"%\"\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React, {useEffect, useState} from 'react';\nimport styles from './App.module.scss';\nimport CommentInput from \"./components/CommentInput/CommentInput\";\nimport Button from \"./components/Button/Button\";\nimport ButtonThemes from \"./components/Button/ButtonThemes\";\nimport FilesList, {IFile} from \"./components/FilesList/FilesList\";\nimport AttachFileButton from \"./components/AttachFileButton/AttachFileButton\";\n\nimport axios from 'axios';\nimport {ClipLoader} from \"react-spinners\";\n\nimport openSocket from 'socket.io-client';\nimport ProgressBar from \"./components/ProgressBar/ProgressBar\";\nimport {getFilesUrl, socketUrl, uploadFileUrl} from \"./api/api\";\n\nconst socket = openSocket(socketUrl);\n\nlet tokenId:string | null = null;\n\nsocket.on(\"tokenId\", (newTokenId:string) => {\n    tokenId = newTokenId;\n});\n\nfunction App() {\n\n    const [isFileUploading, setIsFileUploading] = useState(false);\n\n    const [isFileListUploading, setIsFileListUploading] = useState(false);\n\n    const [comment, setComment] = useState(\"\");\n\n    const [attachedFile, setAttachedFile] = useState<File | null>(null);\n\n    const [listOfFiles, setListOfFiles] = useState<Array<IFile>>([])\n\n    const [progress, setProgress] = useState<null | number>(null);\n\n    const onChange = (value: string): void => {\n        setComment(value);\n    };\n\n    const onLoadFiles = (files:FileList) => {\n        setAttachedFile(files[0]);\n    };\n\n    const onSend = async ():Promise<any> => {\n        let formData = new FormData();\n\n        formData.append(\"tokenId\", tokenId as string);\n        formData.append(\"comment\", comment as string);\n        formData.append(\"file\", attachedFile as Blob);\n        setIsFileUploading(true);\n        socket.on(\"progress\", (data:{progress: number, type: string}) => {\n            if(data.type === \"PROGRESS\") {\n                setProgress(data.progress);\n            }\n            if(data.type === \"END\") {\n                socket.off(\"progress\");\n                setProgress(null);\n                setAttachedFile(null);\n                setComment(\"\");\n                setIsFileUploading(false);\n            }\n        });\n        try {\n            const response = await axios.post(uploadFileUrl, formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            });\n            const files = response.data as Array<IFile>;\n\n            setListOfFiles(files);\n        } catch (error) {\n            const newFiles = [...listOfFiles];\n            newFiles.push({\n                filename: attachedFile?.name as string,\n                size: attachedFile?.size as number,\n                timestamp: Date.now(),\n                comment,\n                error: \"Не удалось загрузить файл, попробуйте позже...\"\n            });\n            socket.off(\"progress\");\n            setProgress(null);\n            setAttachedFile(null);\n            setComment(\"\");\n            setIsFileUploading(false);\n            setListOfFiles(newFiles);\n        }\n    };\n\n    const downloadFilesNames = async ():Promise<any> => {\n        setIsFileListUploading(true);\n        const response = await axios.get(getFilesUrl);\n        setIsFileListUploading(false);\n        const files = response.data as Array<IFile>;\n\n        setListOfFiles(files);\n    };\n\n    useEffect(() => {\n        downloadFilesNames();\n    }, []);\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title}>\n                File Storage\n            </h1>\n            {\n                attachedFile &&\n                <span className={styles.attachedFileName}>\n                    File: {attachedFile.name}\n                </span>\n            }\n            <CommentInput\n                onChange={onChange}\n                value={comment}\n                placeholder={\"Комментарий\"}\n                className={styles.commentInput}\n            />\n            <div className={styles.actions}>\n                <AttachFileButton onLoadFiles={onLoadFiles}>\n                    Прикрепить файл\n                </AttachFileButton>\n                <Button\n                    theme={ButtonThemes.success}\n                    disabled={!Boolean(attachedFile) || isFileUploading}\n                    onClick={onSend}\n                    className={styles.sendButton}\n                >\n                    Отправить\n                    <span className={styles.loader}>\n                        <ClipLoader\n                            size={12}\n                            loading={isFileUploading}\n                            color={\"#ffffff\"}\n                        />\n                    </span>\n                </Button>\n                {progress && (\n                    <div className={styles.progressBar}>\n                        <ProgressBar now={progress} />\n                    </div>\n                )}\n            </div>\n\n            {isFileListUploading ? <ClipLoader color={\"#6B49FA\"} loading={isFileListUploading} size={40} /> : <FilesList data={listOfFiles} />}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFile\":\"AttachFileButton_inputFile__1K32_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProgressBar_container__e5HyO\",\"progress\":\"ProgressBar_progress__muJyN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilesList_container__RKg1H\",\"item\":\"FilesList_item__3V1Jm\",\"row\":\"FilesList_row__3idB7\",\"name\":\"FilesList_name__dCs7M\",\"size\":\"FilesList_size__2D_JJ\",\"time\":\"FilesList_time__j6K1K\",\"error\":\"FilesList_error__2Hjls\",\"expand\":\"FilesList_expand__x-9GU\",\"downloadButton\":\"FilesList_downloadButton__1IRyE\",\"comment\":\"FilesList_comment__1Gjgq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CommentInput_input__15HX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2gGQh\",\"title\":\"App_title__1xlQM\",\"commentInput\":\"App_commentInput__2zLgC\",\"actions\":\"App_actions__10SYP\",\"attachedFileName\":\"App_attachedFileName__1n6Cw\",\"sendButton\":\"App_sendButton__311v9\",\"loader\":\"App_loader__10dOz\",\"progressBar\":\"App_progressBar__34uVe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1a_z8\",\"primary\":\"Button_primary__3fkJw\",\"success\":\"Button_success__BOJ9o\",\"secondary\":\"Button_secondary__1tV6b\"};"],"sourceRoot":""}