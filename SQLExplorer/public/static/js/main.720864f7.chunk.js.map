{"version":3,"sources":["App.module.scss","api/api.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","baseURL","request","axios","create","sendDatabaseQuery","query_string","body","query","post","headers","App","useState","queryValue","setQueryValue","selectResponseValue","setSelectResponseValue","changeResponseValue","setChangeResponseValue","errorResponse","setErrorResponse","onSendRequest","a","response","data","payload","type","Error","status","errorInfo","description","sqlMessage","className","styles","container","requestContainer","textarea","value","onChange","target","placeholder","onClick","buttonSendRequest","error","default","highlight","Boolean","row","affectedRows","changedRows","title","headerNames","Object","keys","map","headerName","index","key","renderTableOfSelectResponseValue","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.720864f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3sGaf\",\"requestContainer\":\"App_requestContainer__HLCP3\",\"textarea\":\"App_textarea__1beTJ\",\"buttonSendRequest\":\"App_buttonSendRequest__1atf2\",\"error\":\"App_error__sdlFC\",\"highlight\":\"App_highlight__1NvI1\",\"default\":\"App_default__2qIbe\",\"changeResponseValue\":\"App_changeResponseValue__29QU8\",\"row\":\"App_row__2CTnJ\",\"description\":\"App_description__2xCnz\",\"value\":\"App_value__2TO_P\",\"selectResponseValue\":\"App_selectResponseValue__2SUNj\",\"title\":\"App_title__-4pOm\"};","import axios from 'axios';\r\n\r\n\r\nconst port = 3030;\r\n\r\nconst baseURL = process.env.NODE_ENV === 'production' ? `http://46.101.182.162:${port}` : `http://localhost:${port}`;\r\n\r\nconst request = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport const sendDatabaseQuery = (query_string) => {\r\n    const body = {\r\n        query: query_string\r\n    };\r\n\r\n    const options = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    return request.post(\"/database/request\", body, options);\r\n};\r\n","import React, {useState} from 'react';\nimport {sendDatabaseQuery} from \"./api/api\";\n\nimport styles from './App.module.scss';\n\nfunction App() {\n    const [queryValue, setQueryValue] = useState('');\n\n    const [selectResponseValue, setSelectResponseValue] = useState(null);\n\n    const [changeResponseValue, setChangeResponseValue] = useState(null);\n\n    const [errorResponse, setErrorResponse] = useState(null);\n\n    const onSendRequest = async () => {\n\n        setErrorResponse(null);\n        setChangeResponseValue(null);\n        setSelectResponseValue(null);\n\n        try {\n            const response = (await sendDatabaseQuery(queryValue)).data;\n\n            switch (response.payload.type) {\n                case \"select\":\n                    setSelectResponseValue(response.payload.data);\n                    break;\n                case \"change\":\n                    setChangeResponseValue(response.payload.data);\n                    break;\n                default:\n                    throw new Error(\"Неизвестный ответ сервера\");\n            }\n\n\n        } catch (error) {\n            if (\"response\" in error && error.response.status === 500) {\n                setErrorResponse(error.response.data.errorInfo.description.sqlMessage);\n            }\n        }\n    };\n\n    const onChangeTextareaValue = ({target}) => {\n        setQueryValue(target.value);\n    };\n\n    const renderTableOfSelectResponseValue = () => {\n\n        const headerNames = Object.keys(selectResponseValue[0]);\n\n        return (\n            <table>\n                <thead>\n                <tr>\n                    {headerNames.map((headerName) => {\n                        return <th>{headerName}</th>;\n                    })}\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    selectResponseValue.map((row, index) => {\n                        return (\n                            <tr key={index}>\n                                {\n                                    headerNames.map((headerName) => {\n                                        return (\n                                            <td key={headerName}>\n                                                {row[headerName]}\n                                            </td>\n                                        );\n                                    })\n                                }\n                            </tr>\n                        );\n                    })\n                }\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.requestContainer}>\n                <textarea\n                    className={styles.textarea}\n                    value={queryValue}\n                    onChange={onChangeTextareaValue}\n                    placeholder={\"Type query...\"}\n                />\n                <button\n                    onClick={onSendRequest}\n                    className={styles.buttonSendRequest}\n                >\n                    Send request\n                </button>\n                {errorResponse && (\n                    <span className={styles.error}>\n                    <span className={styles.default}>Ошибка, полученная с сервера:</span> <span\n                        className={styles.highlight}>{errorResponse}</span>\n                </span>\n                )}\n                {\n                    Boolean(changeResponseValue) && (\n                        <div className={styles.changeResponseValue}>\n\n                            <span className={styles.row}>\n                                <span className={styles.description}>Затронутых строк: </span>\n                                <span className={styles.value}>{changeResponseValue.affectedRows}</span>\n                            </span>\n                            <span className={styles.row}>\n                                <span className={styles.description}>Изменённых строк: </span>\n                                <span className={styles.value}>{changeResponseValue.changedRows}</span>\n                            </span>\n\n\n                        </div>\n                    )\n                }\n                {\n                    Boolean(selectResponseValue) && (\n                        <div className={styles.selectResponseValue}>\n                            <span className={styles.title}>Полученные данные: </span>\n                            {renderTableOfSelectResponseValue()}\n                        </div>\n                    )\n                }\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}